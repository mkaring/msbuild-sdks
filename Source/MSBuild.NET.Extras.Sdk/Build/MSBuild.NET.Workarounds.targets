<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
	</PropertyGroup>

	<Target Name="IncludeWindowsLibraryLayoutItems"
			Condition="'$(GenerateLibraryLayout)' == 'true' AND '$(SDKIdentifier)' == 'Windows'"
			DependsOnTargets="PrepareLibraryLayout">
		<ItemGroup>
			<TfmSpecificPackageFile Include="@(_LayoutFile)" PackagePath="lib\$(TargetFramework)\%(_LayoutFile.TargetPath)"/>
		</ItemGroup>
	</Target>

	<!--
		Workaround to fix Intellisense file generation for XAML projects
		ISSUE: https://github.com/dotnet/project-system/issues/2488
	-->
	<Target Name="_DesignTimeBuildAndIntellisenseWorkaround"
			AfterTargets="_CheckCompileDesignTimePrerequisite"
			Condition="'@(Page)' != ''">
		<PropertyGroup>
			<BuildingProject>false</BuildingProject>
		</PropertyGroup>
	</Target>

	<!-- Handle Library Layout in NuGet packages -->
	<PropertyGroup>
		<TargetsForTfmSpecificContentInPackage Condition="'$(SkipWindowsLibraryLayout)' != 'true'">$(TargetsForTfmSpecificContentInPackage);IncludeWindowsLibraryLayoutItems</TargetsForTfmSpecificContentInPackage>
	</PropertyGroup>

	<PropertyGroup>
		<!-- Detect the SDK version. For now, we have to check the BundledNETCoreAppTargetFrameworkVersion property since there's no separate SDK version property -->
		<_SdkDotNetVersion>$(BundledNETCoreAppTargetFrameworkVersion)</_SdkDotNetVersion>
		<_SdkDotNetVersion Condition="'$(_SdkDotNetVersion)' == ''">1.0</_SdkDotNetVersion>
		<NuGetBuildTasksPackTargets Condition="'$(_SdkDotNetVersion)' &lt; '2.0'">$(MSBuildThisFileDirectory)NuGet.Workarounds.targets</NuGetBuildTasksPackTargets>
		<ImportNuGetBuildTasksPackTargetsFromSdk Condition="'$(_SdkDotNetVersion)' &lt; '2.0'">true</ImportNuGetBuildTasksPackTargetsFromSdk>
	</PropertyGroup>

	<!--
		Workaround for bug in Microsoft.NET.Sdk < v2.0 where satellites were deployed on top of each other in root.
		ISSUE: https://github.com/dotnet/sdk/issues/1360
	-->
	<Target Name="SatelliteDeploymentOldSdkWorkaround"
			AfterTargets="ResolveLockFileCopyLocalProjectDeps"
			Condition="'$(_SdkDotNetVersion)' &lt; '2.0' AND '$(IsMultiTargetingBuild)' != 'true'">
		<ItemGroup>
			<ReferenceCopyLocalPaths Remove="@(ResourceCopyLocalItems)"/>
			<ReferenceCopyLocalPaths Include="@(ResourceCopyLocalItems)" Condition="'@(ResourceCopyLocalItems)' != ''">
				<DestinationSubDirectory>$([System.IO.Directory]::GetParent(%(ResourceCopyLocalItems.FullPath)).Name)\</DestinationSubDirectory>
			</ReferenceCopyLocalPaths>
		</ItemGroup>
	</Target>

	<!--
		WPF sometimes creates a temporary project, since it changes the peoject file, it breaks Project Extensions import.
		In order to properly import Project Extensions, we need the user to set '_SdkOriginalProjectFile' and use it to import Project Extensions.
	-->
	<ImportGroup Condition="'$(_SdkOriginalProjectFile)' != '' AND '$(ImportProjectExtensionTargets)' == 'true'">
		<Import Project="$(_SdkOriginalProjectExtensionsPath)$(_SdkOriginalProjectFile).*.targets" Condition="'Exists('$(_SdkOriginalProjectExtensionsPath)')"/>
	</ImportGroup>

</Project>