<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
	</PropertyGroup>

	<PropertyGroup Condition="!$(TargetFramework.Contains(','))">
		<!-- Convert $(TargetFramework) to lower case -->
		<TargetFramework>$(TargetFramework.ToLowerInvariant())</TargetFramework>
		<!-- if net-client is only specified then default to the highest supported version of the profile -->
		<TargetFramework Condition="'$(TargetFramework)' == 'net-client'">net40-client</TargetFramework>
	</PropertyGroup>

	<!--
		Split $(TargetFramework) into short identifier, version and profile list
		For Example:
			net45 into 'net', '45'
			net40-client into 'net', '40', '+client+'
			portable45-net45+win8+wp8+wpa81 into 'portable', '45', '+net45+win8+wp8+wpa81+'
	-->
	<Choose>
		<When Condition="$(TargetFramework.Contains(','))"/>

		<When Condition="$(TargetFramework.Contains('-'))">
			<!-- Handle short framework ids with profiles -->
			<PropertyGroup>
				<_SdkShortFrameworkIdentifierWithVersion>$(TargetFramework.Split('-')[0])</_SdkShortFrameworkIdentifierWithVersion>
				<_SdkShortFrameworkIdentifier>$(_SdkShortFrameworkIdentifierWithVersion.TrimEnd('.0123456789'))</_SdkShortFrameworkIdentifier>
				<_SdkShortFrameworkVersion>$(_SdkShortFrameworkIdentifierWithVersion.Substring($(_SdkShortFrameworkIdentifier.Length)))</_SdkShortFrameworkVersion>
				<_SdkShortFrameworkProfile>$(TargetFramework.Split('-')[1])</_SdkShortFrameworkProfile>
				<_SdkShortFrameworkProfileCount>$(_SdkShortFrameworkProfile.Split('+').Length)</_SdkShortFrameworkProfileCount>
				<!-- Pre and post-pend the separator char + to the short-TFM list after counting so we can easily do a Contains() match -->
				<_SdkShortFrameworkProfile>+$(_SdkShortFrameworkProfile)+</_SdkShortFrameworkProfile>
			</PropertyGroup>
		</When>

		<Otherwise>
			<!-- Handle simple short framework ids -->
			<PropertyGroup>
				<_SdkShortFrameworkIdentifier>$(TargetFramework.TrimEnd('.0123456789'))</_SdkShortFrameworkIdentifier>
				<_SdkShortFrameworkVersion>$(TargetFramework.Substring($(_SdkShortFrameworkIdentifier.Length)))</_SdkShortFrameworkVersion>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<!-- Map short name to long name. See earlier comment for example of how to work with identifiers that are not recognized here. -->
	<PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == ''">

		<TargetFrameworkIdentifier Condition="'$(_SdkShortFrameworkIdentifier)' == 'net'">.NETFramework</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_SdkShortFrameworkIdentifier)' == 'netmf'">.NETMicroFramework</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_SdkShortFrameworkIdentifier)' == 'portable'">.NETPortable</TargetFrameworkIdentifier>

		<TargetFrameworkIdentifier Condition="'$(_SdkShortFrameworkIdentifier)' == 'sl'">Silverlight</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_SdkShortFrameworkIdentifier)' == 'wp'">WindowsPhone</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_SdkShortFrameworkIdentifier)' == 'wpa'">WindowsPhoneApp</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_SdkShortFrameworkIdentifier)' == 'win'">.NETCore</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_SdkShortFrameworkIdentifier)' == 'uap'">.NETCore</TargetFrameworkIdentifier>

		<TargetFrameworkIdentifier Condition="'$(_SdkShortFrameworkIdentifier)' == 'monoandroid'">MonoAndroid</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_SdkShortFrameworkIdentifier)' == 'monotouch'">MonoTouch</TargetFrameworkIdentifier>

		<TargetFrameworkIdentifier Condition="'$(_SdkShortFrameworkIdentifier)' == 'xamarin.android' OR '$(_SdkShortFrameworkIdentifier)' == 'xamarinandroid'">Xamarin.Android</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_SdkShortFrameworkIdentifier)' == 'xamarin.ios' OR '$(_SdkShortFrameworkIdentifier)' == 'xamarinios'">Xamarin.iOS</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_SdkShortFrameworkIdentifier)' == 'xamarin.mac' OR '$(_SdkShortFrameworkIdentifier)' == 'xamarinmac'">Xamarin.Mac</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_SdkShortFrameworkIdentifier)' == 'xamarin.tvos' OR '$(_SdkShortFrameworkIdentifier)' == 'xamarintvos'">Xamarin.TVOS</TargetFrameworkIdentifier>
		<TargetFrameworkIdentifier Condition="'$(_SdkShortFrameworkIdentifier)' == 'xamarin.watchos' OR '$(_SdkShortFrameworkIdentifier)' == 'xamarinwatchos'">Xamarin.WatchOS</TargetFrameworkIdentifier>

		<TargetFrameworkIdentifier Condition="'$(_SdkShortFrameworkIdentifier)' == 'tizen'">Tizen</TargetFrameworkIdentifier>

	</PropertyGroup>

	<Choose>
		<When Condition="'$(_SdkShortFrameworkVersion)' != '' AND $(_SdkShortFrameworkVersion.Contains('.'))">
			<!-- Versions with dots are taken as is. -->
			<PropertyGroup Condition="'$(TargetFrameworkVersion)' == ''">
				<TargetFrameworkVersion>$(_SdkShortFrameworkVersion)</TargetFrameworkVersion>
			</PropertyGroup>
		</When>

		<When Condition="'$(_SdkShortFrameworkVersion)' != ''">
			<!-- Versions with no dots and up to 3 characters gets implicit dots between characters. -->
			<PropertyGroup Condition="'$(TargetFrameworkVersion)' == ''">
				<TargetFrameworkVersion Condition="$(_SdkShortFrameworkVersion.Length) == 1">$(_SdkShortFrameworkVersion[0]).0</TargetFrameworkVersion>
				<TargetFrameworkVersion Condition="$(_SdkShortFrameworkVersion.Length) == 2">$(_SdkShortFrameworkVersion[0]).$(_SdkShortFrameworkVersion[1])</TargetFrameworkVersion>
				<TargetFrameworkVersion Condition="$(_SdkShortFrameworkVersion.Length) == 3">$(_SdkShortFrameworkVersion[0]).$(_SdkShortFrameworkVersion[1]).$(_SdkShortFrameworkVersion[2])</TargetFrameworkVersion>
			</PropertyGroup>
		</When>

		<Otherwise>
			<PropertyGroup Condition="'$(TargetFrameworkVersion)' != ''">
				<TargetFrameworkVersion>$(TargetFrameworkVersion.TrimStart('vV'))</TargetFrameworkVersion>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<!--
		Don't leave TargetFrameworkVersion empty if it still hasn't been determined. We will trigger the error above,
		but we need this to be a valid version so that our error message does not get pre-empted by failure to interpret
		version comparison expressions, which is currently unrecoverable in VS.

		Also don't leave TargetFrameworkIdentifier unset as it will be defaulted to .NETFramework by common targets, which
		can cause restore (which we cannot block, see above) to silently succeed for empty TargetFramework.
	-->
	<PropertyGroup>
		<TargetFrameworkIdentifier Condition="'$(TargetFrameworkIdentifier)' == ''">_</TargetFrameworkIdentifier>
		<TargetFrameworkVersion Condition="'$(TargetFrameworkVersion)' == ''">0.0</TargetFrameworkVersion>
		<_TargetFrameworkVersionWithoutV>$(TargetFrameworkVersion)</_TargetFrameworkVersionWithoutV>
		<TargetFrameworkVersion>v$(_TargetFrameworkVersionWithoutV)</TargetFrameworkVersion>
	</PropertyGroup>

	<!-- Support for resolving portable framework profiles -->
	<Import Project="$(MSBuildThisFileDirectory)FrameworkResolvers\MSBuild.NETPortable.$(TargetFrameworkVersion).targets"
			Condition="'$(TargetFrameworkIdentifier)' == '.NETPortable'"/>

</Project>