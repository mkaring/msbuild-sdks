<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
	</PropertyGroup>

	<!-- Don't Need no duplication! We need to init BuildPath property since MSBuildProjectExtensionsPath depends on it. -->
	<Import Project="$(MSBuildThisFileDirectory)..\Build\MSBuild.OutputPaths.props" />

	<!--
		Prepare to import project extensions which usually come from packages. Package management systems will create a file at:
		$(MSBuildProjectExtensionsPath)\$(MSBuildProjectFile).<SomethingUnique>.<props/targets>
		Each package management system should use a unique moniker to avoid collisions. It is a wild-card import so the package
		management system can write out multiple files but the order of the import is alphabetic because MSBuild sorts the list.
	-->
	<PropertyGroup>
		<MSBuildProjectExtensionsPath Condition="'$(MSBuildProjectExtensionsPath)' == ''">$(BuildPath)</MSBuildProjectExtensionsPath>
		<MSBuildProjectExtensionsPath Condition="!HasTrailingSlash('$(MSBuildProjectExtensionsPath)')">$(MSBuildProjectExtensionsPath)\</MSBuildProjectExtensionsPath>
		<!--
			Import paths that are relative default to be relative to the importing file. However, since MSBuildExtensionsPath
			defaults to BuildPath we expect it to be relative to the BuildPath directory. So if the path is relative
			it needs to be made absolute based on the MSBuildProjectDirectory directory.
		-->
		<MSBuildProjectExtensionsPath Condition="'$([System.IO.Path]::IsPathRooted($(MSBuildProjectExtensionsPath)))' == 'false'">$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', '$(MSBuildProjectExtensionsPath)'))</MSBuildProjectExtensionsPath>
		<RestoreOutputPath>$(MSBuildProjectExtensionsPath)</RestoreOutputPath>
	</PropertyGroup>

	<PropertyGroup>
		<ImportedMSBuildProjectExtensionsCoreProps>true</ImportedMSBuildProjectExtensionsCoreProps>
	</PropertyGroup>

</Project>