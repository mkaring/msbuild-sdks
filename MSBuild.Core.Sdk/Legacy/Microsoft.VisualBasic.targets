<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!--
		We are doing a cross-targeting build if there is no list of target frameworks specified
		nor is there a current target framework being built individually. In that case, this import is
		redirected to Microsoft.VisualBasic.CrossTargeting.targets.
	-->
	<PropertyGroup Condition="'$(TargetFrameworks)' != '' and '$(TargetFramework)' == ''">
		<IsCrossTargetingBuild>true</IsCrossTargetingBuild>
	</PropertyGroup>

	<!--
		In VS 2010 SP1 and VS 2012, both supported for asset compatibility, the MSBuild installed
		as part of them did not enforce using the local ToolsVersion (4.0) in all cases, but instead
		just used whatever ToolsVersion was in the project file if it existed on the machine, and
		only forced 4.0 if that ToolsVersion did not exist.

		Moving forward, we do want to enforce a single acting ToolsVersion per version of Visual Studio,
		but in order to approximate this behavior on VS 2010 SP1 and VS 2012 as well, we've redirected
		the targets:  If we're building using 4.X MSBuild (which doesn't define the new reserved
		property, MSBuildAssemblyVersion), we'll point right back at the 4.0 targets, which still exist
		as part of the .NET Framework.  Only if we're using the new MSBuild will we point to the current
		targets.
	-->
	<Choose>
		<When Condition="'$(MSBuildAssemblyVersion)' == ''">
			<PropertyGroup>
				<MicrosoftVisualBasicTargetsPath>$(MSBuildFrameworkToolsPath)\Microsoft.VisualBasic.targets</MicrosoftVisualBasicTargetsPath>

				<!-- Same condition as in .NET 4.5 VB targets so that we can override the behavior where it defaults to MSBuildToolsPath, which would be incorrect in this case -->
				<VbcToolPath Condition="'$(VbcToolPath)' == '' and '$(BuildingInsideVisualStudio)' != 'true'">$(MSBuildFrameworkToolsPath)</VbcToolPath>
			</PropertyGroup>
		</When>
		<When Condition="'$(IsCrossTargetingBuild)' == 'true'">
			<PropertyGroup>
				<MicrosoftVisualBasicTargetsPath>$(MSBuildLegacyToolsPath)\Microsoft.VisualBasic.CrossTargeting.targets</MicrosoftVisualBasicTargetsPath>
			</PropertyGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<MicrosoftVisualBasicTargetsPath>$(MSBuildLegacyToolsPath)\Microsoft.VisualBasic.CurrentVersion.targets</MicrosoftVisualBasicTargetsPath>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
		<ImportByWildcardBeforeMicrosoftVisualBasicTargets>false</ImportByWildcardBeforeMicrosoftVisualBasicTargets>
		<ImportByWildcardAfterMicrosoftVisualBasicTargets>false</ImportByWildcardAfterMicrosoftVisualBasicTargets>
		<ImportUserLocationsByWildcardBeforeMicrosoftVisualBasicTargets>false</ImportUserLocationsByWildcardBeforeMicrosoftVisualBasicTargets>
		<ImportUserLocationsByWildcardAfterMicrosoftVisualBasicTargets>false</ImportUserLocationsByWildcardAfterMicrosoftVisualBasicTargets>
	</PropertyGroup>

	<PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
		<ImportByWildcardBeforeMicrosoftCommonTargets>false</ImportByWildcardBeforeMicrosoftCommonTargets>
		<ImportByWildcardAfterMicrosoftCommonTargets>false</ImportByWildcardAfterMicrosoftCommonTargets>
		<ImportUserLocationsByWildcardBeforeMicrosoftCommonTargets>false</ImportUserLocationsByWildcardBeforeMicrosoftCommonTargets>
		<ImportUserLocationsByWildcardAfterMicrosoftCommonTargets>false</ImportUserLocationsByWildcardAfterMicrosoftCommonTargets>
	</PropertyGroup>

	<PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == '' and ('$(TargetFrameworkIdentifier)' == '.NETFramework' or '$(TargetFrameworkIdentifier)' == 'Silverlight' or ('$(TargetFrameworkIdentifier)' == '' and ('$(TargetRuntime)' == 'Managed' or '$(TargetRuntime)' == '')))">
		<ImportByWildcardBeforeMicrosoftNetFrameworkProps>false</ImportByWildcardBeforeMicrosoftNetFrameworkProps>
		<ImportByWildcardAfterMicrosoftNetFrameworkProps>false</ImportByWildcardAfterMicrosoftNetFrameworkProps>
		<ImportUserLocationsByWildcardBeforeMicrosoftNetFrameworkProps>false</ImportUserLocationsByWildcardBeforeMicrosoftNetFrameworkProps>
		<ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkProps>false</ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkProps>
	</PropertyGroup>

	<Import Project="$(MicrosoftVisualBasicTargetsPath)" />

	<!-- Fix up FrameworkPathOverride, which is primarily used to determine the location of mscorlib.dll in the
		 (relatively uncommon) situation where the reference assemblies, in which it's usually found, are not
		 installed.  Defined here rather than in Microsoft.Common.targets because the .NET Microsoft.VisualBasic.targets
		 imports Microsoft.Common.targets from the current directory. -->
	<PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
		<FrameworkPathOverride Condition="!Exists('$(FrameworkPathOverride)\mscorlib.dll')">$(MSBuildFrameworkToolsPath)</FrameworkPathOverride>
	</PropertyGroup>

</Project>